package main

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSerializeCaseTable(t *testing.T) {
	testCases := []struct {
		name  string
		slice Book
		exp   []byte
	}{
		{
			name: "testSerialize",
			slice: Book{
				ID:     5,
				Title:  "Book 1",
				Author: "Author 1",
				Year:   2000,
				Size:   100,
				Rate:   4.5,
			},
			exp: []byte{
				0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a,
				0x35, 0x2c, 0x22, 0x74, 0x69, 0x74, 0x6c,
				0x65, 0x22, 0x3a, 0x22, 0x42, 0x6f, 0x6f,
				0x6b, 0x20, 0x31, 0x22, 0x2c, 0x22, 0x61,
				0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a,
				0x22, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
				0x20, 0x31, 0x22, 0x2c, 0x22, 0x79, 0x65,
				0x61, 0x72, 0x22, 0x3a, 0x32, 0x30, 0x30,
				0x30, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65,
				0x22, 0x3a, 0x31, 0x30, 0x30, 0x2c, 0x22,
				0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34,
				0x2e, 0x35, 0x7d,
			},
		},
	}
	for _, tC := range testCases {
		t.Run(tC.name, func(t *testing.T) {
			actual, err := serialize(tC.slice)
			if err != nil {
				fmt.Printf("Не удалось из-за: %+v\n", err)
				return
			}
			assert.Equal(t, tC.exp, actual)
		})
	}
}

func TestDeserializeCaseTable(t *testing.T) {
	testCases := []struct {
		name  string
		slice []byte
		exp   *Book
	}{
		{
			name: "testSerialize",
			slice: []byte{
				0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a,
				0x35, 0x2c, 0x22, 0x74, 0x69, 0x74, 0x6c,
				0x65, 0x22, 0x3a, 0x22, 0x42, 0x6f, 0x6f,
				0x6b, 0x20, 0x31, 0x22, 0x2c, 0x22, 0x61,
				0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a,
				0x22, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
				0x20, 0x31, 0x22, 0x2c, 0x22, 0x79, 0x65,
				0x61, 0x72, 0x22, 0x3a, 0x32, 0x30, 0x30,
				0x30, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65,
				0x22, 0x3a, 0x31, 0x30, 0x30, 0x2c, 0x22,
				0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34,
				0x2e, 0x35, 0x7d,
			},
			exp: &Book{ID: 5, Title: "Book 1", Author: "Author 1", Year: 2000, Size: 100, Rate: 4.5},
		},
	}
	for _, tC := range testCases {
		t.Run(tC.name, func(t *testing.T) {
			actual, err := deserialize(tC.slice)
			if err != nil {
				fmt.Printf("Не удалось из-за: %+v\n", err)
				return
			}
			assert.Equal(t, tC.exp, actual)
		})
	}
}
